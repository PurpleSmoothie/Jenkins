pipeline {
    agent any

    environment {
        DB_HOST = '176.108.246.204'
        DB_PORT = '5432'
        DB_NAME = 'postgres'
        DB_USER = 'postgres'
        DB_PASSWORD = credentials('db_credentials')  
        OPENROUTER_API_KEY = credentials('llm_api_key') 
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/PurpleSmoothie/Jenkins.git'
            }
        }

 stage('Validate Required Files') {
    steps {
        script {
            echo "=== –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–ê–ô–õ–û–í ==="
            def requiredFiles = [
                "sqlParse.py",
                "explainRunner.py",
                "LLM_aggregator.py"
            ]
            def missingFiles = []

            requiredFiles.each { file ->
                if (!fileExists(file)) {
                    echo "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file}"
                    missingFiles.add(file)
                }
            }

            if (missingFiles.size() > 0) {
                error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${missingFiles.join(', ')}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞.")
            }

            if (!fileExists("example.sql")) {
                echo "‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: example.sql –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –∏–ª–∏ —Ñ–∞–π–ª –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."
            } else {
                echo "‚úÖ example.sql –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            }

            echo "‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
        }
    }
}

        stage('Setup Virtual Environment') {
            steps {
                sh '''
                    echo "=== –°–û–ó–î–ê–ù–ò–ï –í–ò–†–¢–£–ê–õ–¨–ù–û–ì–û –û–ö–†–£–ñ–ï–ù–ò–Ø ==="
                    python3 -m venv /var/jenkins_home/venv --clear
                    echo "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
                '''
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                    echo "=== –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô ==="
                    /var/jenkins_home/venv/bin/pip install --upgrade pip
                    /var/jenkins_home/venv/bin/pip install psycopg2-binary sqlparse python-dotenv openai tenacity
                    echo "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
                '''
            }
        }

        stage('Test DB Connection') {
            steps {
                sh '''
                    echo "=== –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–• ==="
                    /var/jenkins_home/venv/bin/python -c "
import psycopg2
try:
    conn = psycopg2.connect(
        host='$DB_HOST',
        port='$DB_PORT',
        dbname='$DB_NAME',
        user='$DB_USER',
        password='$DB_PASSWORD'
    )
    print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ!')
    conn.close()
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}')
    exit(1)
"
                '''
            }
        }

        stage('Parse SQL Files') {
            steps {
                sh '''
                    echo "=== –ü–ê–†–°–ò–ù–ì SQL-–§–ê–ô–õ–û–í ==="
                    /var/jenkins_home/venv/bin/python sqlParse.py
                    QUERY_COUNT=$(cat parsed_queries.json | jq 'length' 2>/dev/null || echo 0)
                    echo "‚úÖ –ù–∞–π–¥–µ–Ω–æ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤: ${QUERY_COUNT}"
                '''
            }
        }

        stage('Run EXPLAIN ANALYZE') {
            steps {
                sh '''
                    echo "=== –ó–ê–ü–£–°–ö EXPLAIN ANALYZE ==="
                    /var/jenkins_home/venv/bin/python explainRunner.py
                    RESULT_COUNT=$(cat explain_results.json | jq 'length' 2>/dev/null || echo 0)
                    echo "‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${RESULT_COUNT}"
                '''
            }
        }

        stage('LLM Analysis') {
            steps {
                sh '''
                    echo "=== –ê–ù–ê–õ–ò–ó –ß–ï–†–ï–ó LLM ==="
                    /var/jenkins_home/venv/bin/python LLM_aggregator.py --results explain_results.json --report llm_report.json
                    echo "‚úÖ LLM-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω"
                '''
                
                sh '''
                    echo "=== –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –í HTML ==="
                    /var/jenkins_home/venv/bin/python report_converter.py llm_report.json final_result.html
                    ls -la
                '''
            }
        }

        stage('Review Results') {
            steps {
                sh '''
                    echo "=== –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢ ==="
                    echo "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:"
                    ls -la *.json *.html
        
                    echo ""
                    echo "--- –°–¢–ê–¢–ò–°–¢–ò–ö–ê ---"
                    python3 <<EOF
import json

try:
    report = json.load(open('llm_report.json', 'r', encoding='utf-8'))
    total = len(report)
    critical = sum(1 for r in report if r['analysis']['evaluation'] == 'CRITICAL')
    needs_improvement = sum(1 for r in report if r['analysis']['evaluation'] == 'NEEDS_IMPROVEMENT')
    errors = sum(1 for r in report if r.get('analysis', {}).get('issues', []) and '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è' in r['analysis']['issues'][0])

    print(f'üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total}')
    print(f'üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: {critical}')
    print(f'üü° –¢—Ä–µ–±—É—é—Ç —É–ª—É—á—à–µ–Ω–∏—è: {needs_improvement}')
    print(f'‚õî –û—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {errors}')
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}')
    exit(1)
EOF
        '''
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'final_result.html,parsed_queries.json,explain_results.json,llm_report.json', allowEmptyArchive: true
            echo "üìé –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
        }
        success {
            echo "‚úÖ –°–ë–û–†–ö–ê –£–°–ü–ï–®–ù–ê"
        }
        failure {
            echo "‚ùå –°–ë–û–†–ö–ê –ù–ï –£–î–ê–õ–ê–°–¨"
        }
    }
}
