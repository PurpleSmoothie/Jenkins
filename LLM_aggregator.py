#!/usr/bin/env python3

import json
import argparse
import os
import sys
import logging
from typing import Dict, List, Any

import openai


logging.basicConfig(level=logging.INFO, format='%(asctime)s | %(levelname)s | %(message)s')
logger = logging.getLogger(__name__)


class OpenRouterAnalyzer:
    def __init__(self):
        self.api_key = os.getenv("OPENROUTER_API_KEY")
        if not self.api_key:
            raise ValueError("OPENROUTER_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
        self.base_url = "https://openrouter.ai/api/v1"
        self.model = "mistralai/mistral-7b-instruct:free"  # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å

        try:
            self.client = openai.OpenAI(
                api_key=self.api_key,
                base_url=self.base_url
            )
            logger.info("‚úÖ OpenRouter –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenRouter: {e}")
            raise

    def _build_prompt(self, query_data: Dict[str, Any]) -> str:
        explain_output = ' '.join(query_data.get('explain_output', [])) if query_data.get('explain_output') else 'N/A'
        tables = ', '.join(query_data.get('tables', [])) if query_data.get('tables') else 'N/A'

        return f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π SQL-–∑–∞–ø—Ä–æ—Å –∏ –µ–≥–æ EXPLAIN ANALYZE –≤—ã–≤–æ–¥.

–ó–∞–ø—Ä–æ—Å: 
{query_data['query']}

EXPLAIN ANALYZE –≤—ã–≤–æ–¥:
{explain_output}

–¢–∞–±–ª–∏—Ü—ã: {tables}
–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {query_data['type']}

–û—Ü–µ–Ω–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
- GOOD: —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, –±—ã—Å—Ç—Ä–æ, —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
- ACCEPTABLE: —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å —Ä–∏—Å–∫–∏
- NEEDS_IMPROVEMENT: –º–µ–¥–ª–µ–Ω–Ω–æ, seq scan, –Ω–µ—Ç –∏–Ω–¥–µ–∫—Å–æ–≤
- CRITICAL: –æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ

–û—Ç–≤–µ—Ç –≤ JSON:
{{
  "evaluation": "GOOD|ACCEPTABLE|NEEDS_IMPROVEMENT|CRITICAL",
  "severity": "LOW|MEDIUM|HIGH|CRITICAL",
  "execution_time": "–≤—Ä–µ–º—è",
  "issues": ["—Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º"],
  "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"]
}}
"""

    def analyze_query(self, query_data: Dict[str, Any]) -> Dict[str, Any]:
        prompt = self._build_prompt(query_data)

        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[{"role": "user", "content": prompt}],
                temperature=0.3,
                max_tokens=400
            )
            content = response.choices[0].message.content.strip()

            # –ß–∞—Å—Ç–æ LLM –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ JSON –±–µ–∑ –æ–±—ë—Ä—Ç–∫–∏
            try:
                return json.loads(content)
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ –Ω–µ JSON ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å
                import re
                json_match = re.search(r'\{.*\}', content, re.DOTALL)
                if json_match:
                    return json.loads(json_match.group())
                else:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenRouter: {e}")
            return {
                "evaluation": "ACCEPTABLE",
                "severity": "MEDIUM",
                "issues": [f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"],
                "recommendations": ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é"]
            }


def generate_report(results_file: str, analyzer: OpenRouterAnalyzer) -> List[Dict]:
    try:
        with open(results_file, 'r', encoding='utf-8') as f:
            results = json.load(f)
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {results_file}: {e}")
        sys.exit(1)

    report = []
    for item in results:
        if item.get('error'):
            analysis = {
                "evaluation": "CRITICAL",
                "severity": "CRITICAL",
                "issues": [f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {item['error']}"],
                "recommendations": ["–ò—Å–ø—Ä–∞–≤—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å SQL"]
            }
        else:
            analysis = analyzer.analyze_query(item)

        report.append({
            "query": item["query"],
            "type": item["type"],
            "tables": item.get("tables", []),
            "file_path": item.get("file_path", "unknown"),
            "analysis": analysis
        })

    return report


def check_deployment_criteria(report: List[Dict]) -> bool:
    critical_count = 0
    improvable_count = 0
    total = len(report)

    if total == 0:
        print("‚ö†Ô∏è –ù–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
        return False

    for item in report:
        eval = item["analysis"]["evaluation"]
        if eval == "CRITICAL":
            critical_count += 1
        if eval in ["NEEDS_IMPROVEMENT", "CRITICAL"]:
            improvable_count += 1

    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
    print(f"- –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total}")
    print(f"- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {critical_count}")
    print(f"- –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è: {improvable_count}/{total} ({improvable_count / total:.0%})")

    if critical_count > 0:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã! –î–µ–ø–ª–æ–π –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return False

    if improvable_count / total > 0.6:
        print("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç—Ä–µ–±—É—é—Ç —É–ª—É—á—à–µ–Ω–∏—è (>60%). –î–µ–ø–ª–æ–π –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return False

    print("‚úÖ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –ø–æ—Ä—è–¥–∫–µ. –î–µ–ø–ª–æ–π —Ä–∞–∑—Ä–µ—à—ë–Ω.")
    return True


def main():
    parser = argparse.ArgumentParser(description='SQL –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —á–µ—Ä–µ–∑ OpenRouter')
    parser.add_argument('--results', default='explain_results.json', help='–§–∞–π–ª —Å EXPLAIN ANALYZE')
    parser.add_argument('--report', default='llm_report.json', help='–í—ã—Ö–æ–¥–Ω–æ–π –æ—Ç—á—ë—Ç')
    args = parser.parse_args()

    try:
        analyzer = OpenRouterAnalyzer()
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä: {e}")
        sys.exit(1)

    report = generate_report(args.results, analyzer)

    try:
        with open(args.report, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        logger.info(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {args.report}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç: {e}")
        sys.exit(1)

    if not check_deployment_criteria(report):
        sys.exit(1)

    sys.exit(0)


if __name__ == '__main__':
    main()