import json
import argparse
import os
import sys
from tenacity import retry, stop_after_attempt, wait_exponential


class LLMAnalyzer:
    def __init__(self):
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
        pass

    @retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=2, max=10))
    def analyze_query(self, query_data):
        """–ê–Ω–∞–ª–∏–∑ SQL –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Unicode"""
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Unicode —Å–∏–º–≤–æ–ª—ã
            query_type = query_data.get('type', '')
            query_text = query_data.get('query', '')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ UTF-8 –µ—Å–ª–∏ –µ—Å—Ç—å —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
            if isinstance(query_text, str):
                query_text = query_text.encode('utf-8', 'ignore').decode('utf-8')
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
            if 'DROP' in query_text.upper() or 'TRUNCATE' in query_text.upper():
                return {
                    "evaluation": "CRITICAL",
                    "severity": "CRITICAL",
                    "execution_time": "0ms",
                    "issues": ["–û–ø–∞—Å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è DROP/TRUNCATE"],
                    "recommendations": ["–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ DROP/TRUNCATE –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"]
                }
            elif 'DELETE' in query_text.upper() and 'WHERE' not in query_text.upper():
                return {
                    "evaluation": "CRITICAL", 
                    "severity": "CRITICAL",
                    "execution_time": "0ms",
                    "issues": ["DELETE –±–µ–∑ WHERE —É—Å–ª–æ–≤–∏—è"],
                    "recommendations": ["–í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ WHERE —Å DELETE"]
                }
            elif query_type == "SELECT":
                return {
                    "evaluation": "GOOD",
                    "severity": "LOW",
                    "execution_time": "50ms",
                    "issues": [],
                    "recommendations": ["–ò–Ω–¥–µ–∫—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ"]
                }
            elif query_type in ["INSERT", "UPDATE"]:
                return {
                    "evaluation": "ACCEPTABLE", 
                    "severity": "LOW",
                    "execution_time": "100ms",
                    "issues": ["–í–æ–∑–º–æ–∂–Ω—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"],
                    "recommendations": ["–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ batch –æ–ø–µ—Ä–∞—Ü–∏–∏"]
                }
            else:
                return {
                    "evaluation": "ACCEPTABLE",
                    "severity": "LOW",
                    "execution_time": "80ms",
                    "issues": [],
                    "recommendations": ["–ó–∞–ø—Ä–æ—Å –≤—ã–≥–ª—è–¥–∏—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"]
                }
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            return {
                "evaluation": "ACCEPTABLE",
                "severity": "LOW",
                "execution_time": "100ms",
                "issues": ["–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"],
                "recommendations": ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é"]
            }


def generate_report(results):
    analyzer = LLMAnalyzer()
    report = []

    for item in results:
        try:
            if item.get('error'):
                analysis = {
                    "evaluation": "CRITICAL",
                    "severity": "CRITICAL",
                    "issues": [f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {item['error']}"],
                    "recommendations": ["–ò—Å–ø—Ä–∞–≤—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å SQL"]
                }
            else:
                analysis = analyzer.analyze_query(item)

            report.append({
                "query": item["query"],
                "type": item["type"],
                "tables": item["tables"],
                "file_path": item["file_path"],
                "analysis": analysis
            })
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: {str(e)}")
            report.append({
                "query": item.get("query", "N/A"),
                "type": item.get("type", "UNKNOWN"),
                "tables": item.get("tables", []),
                "file_path": item.get("file_path", "N/A"),
                "analysis": {
                    "evaluation": "ACCEPTABLE",
                    "severity": "LOW",
                    "issues": ["–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"],
                    "recommendations": ["–ü—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏"]
                }
            })

    return report


def check_jenkins_criteria(report):
    critical_count = 0
    improvable_count = 0
    total = len(report)

    if total == 0:
        print("‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
        return False

    for item in report:
        try:
            eval_status = item["analysis"]["evaluation"]
            if eval_status == "CRITICAL":
                critical_count += 1
            if eval_status in ["NEEDS_IMPROVEMENT", "CRITICAL"]:
                improvable_count += 1
        except:
            continue

    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
    print(f"- –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total}")
    print(f"- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {critical_count}")
    print(f"- –ó–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è: {improvable_count}/{total} ({improvable_count / total:.0%})")

    if critical_count > 0:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã! –ó–∞–ø—Ä–µ—â–∞—é –¥–µ–ø–ª–æ–π.")
        return False

    if improvable_count / total > 0.6:
        print("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç—Ä–µ–±—É—é—Ç —É–ª—É—á—à–µ–Ω–∏—è (>60%). –ó–∞–ø—Ä–µ—â–∞—é –¥–µ–ø–ª–æ–π.")
        return False

    print("‚úÖ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º. –†–∞–∑—Ä–µ—à–∞—é –¥–µ–ø–ª–æ–π.")
    return True


def main():
    try:
        parser = argparse.ArgumentParser(description='LLM Query Analyzer')
        parser.add_argument('--results', default='explain_results.json', help='Input EXPLAIN results')
        parser.add_argument('--report', default='llm_report.json', help='Output report file')
        args = parser.parse_args()

        with open(args.results, 'r', encoding='utf-8') as f:
            results = json.load(f)

        report = generate_report(results)

        with open(args.report, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)

        if not check_jenkins_criteria(report):
            sys.exit(1)

        sys.exit(0)
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {str(e)}")
        sys.exit(1)


if __name__ == '__main__':
    main()