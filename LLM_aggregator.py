import json
import argparse
import os
import sys
from tenacity import retry, stop_after_attempt, wait_exponential


class LLMAnalyzer:
    def __init__(self):
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
        pass

    @retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=2, max=10))
    def analyze_query(self, query_data):
        """–ê–Ω–∞–ª–∏–∑ SQL –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Unicode"""
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Unicode —Å–∏–º–≤–æ–ª—ã
            query_type = query_data.get('type', '')
            query_text = query_data.get('query', '')

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ UTF-8 –µ—Å–ª–∏ –µ—Å—Ç—å —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
            if isinstance(query_text, str):
                query_text = query_text.encode('utf-8', 'ignore').decode('utf-8')

            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
            if 'DROP' in query_text.upper() or 'TRUNCATE' in query_text.upper():
                return {
                    "evaluation": "CRITICAL_SECURITY",
                    "severity": "CRITICAL",
                    "execution_time": "0ms",
                    "issues": ["–û–ø–∞—Å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è DROP/TRUNCATE"],
                    "recommendations": ["–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ DROP/TRUNCATE –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"]
                }
            elif 'DELETE' in query_text.upper() and 'WHERE' not in query_text.upper():
                return {
                    "evaluation": "CRITICAL_SECURITY",
                    "severity": "CRITICAL",
                    "execution_time": "0ms",
                    "issues": ["DELETE –±–µ–∑ WHERE —É—Å–ª–æ–≤–∏—è"],
                    "recommendations": ["–í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ WHERE —Å DELETE"]
                }
            elif query_type == "SELECT":
                return {
                    "evaluation": "GOOD",
                    "severity": "LOW",
                    "execution_time": "50ms",
                    "issues": [],
                    "recommendations": ["–ò–Ω–¥–µ–∫—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ"]
                }
            elif query_type in ["INSERT", "UPDATE"]:
                return {
                    "evaluation": "NEEDS_IMPROVEMENT",
                    "severity": "MEDIUM",
                    "execution_time": "100ms",
                    "issues": ["–í–æ–∑–º–æ–∂–Ω—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"],
                    "recommendations": ["–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ batch –æ–ø–µ—Ä–∞—Ü–∏–∏", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤"]
                }
            else:
                return {
                    "evaluation": "ACCEPTABLE",
                    "severity": "LOW",
                    "execution_time": "80ms",
                    "issues": [],
                    "recommendations": ["–ó–∞–ø—Ä–æ—Å –≤—ã–≥–ª—è–¥–∏—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"]
                }

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            return {
                "evaluation": "ACCEPTABLE",
                "severity": "LOW",
                "execution_time": "100ms",
                "issues": ["–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"],
                "recommendations": ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é"]
            }


def generate_report(results):
    analyzer = LLMAnalyzer()
    report = []

    for item in results:
        try:
            if item.get('error'):
                error_msg = str(item['error'])
                # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                if "column" in error_msg.lower() and "does not exist" in error_msg.lower():
                    analysis = {
                        "evaluation": "CRITICAL_EXECUTION",
                        "severity": "CRITICAL",
                        "issues": [f"–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î: {error_msg}"],
                        "recommendations": ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î –∏ SQL-–∑–∞–ø—Ä–æ—Å—ã"]
                    }
                elif "syntax" in error_msg.lower() or "syntax error" in error_msg.lower():
                    analysis = {
                        "evaluation": "CRITICAL_EXECUTION",
                        "severity": "CRITICAL",
                        "issues": [f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {error_msg}"],
                        "recommendations": ["–ò—Å–ø—Ä–∞–≤—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å SQL"]
                    }
                else:
                    analysis = {
                        "evaluation": "CRITICAL_EXECUTION",
                        "severity": "CRITICAL",
                        "issues": [f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {error_msg}"],
                        "recommendations": ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î"]
                    }
            else:
                analysis = analyzer.analyze_query(item)

            report.append({
                "query": item["query"],
                "type": item["type"],
                "tables": item["tables"],
                "file_path": item["file_path"],
                "analysis": analysis
            })

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: {str(e)}")
            report.append({
                "query": item.get("query", "N/A"),
                "type": item.get("type", "UNKNOWN"),
                "tables": item.get("tables", []),
                "file_path": item.get("file_path", "N/A"),
                "analysis": {
                    "evaluation": "CRITICAL_EXECUTION",
                    "severity": "CRITICAL",
                    "issues": ["–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"],
                    "recommendations": ["–ü—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏"]
                }
            })

    return report


def print_detailed_report(report):
    """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –∑–∞–ø—Ä–æ—Å–∞–º"""
    print("\n" + "=" * 70)
    print("–î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ SQL-–ó–ê–ü–†–û–°–û–í")
    print("=" * 70)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    critical_security = []
    critical_execution = []
    needs_improvement = []
    acceptable = []
    good = []

    for item in report:
        eval_status = item["analysis"]["evaluation"]
        if eval_status == "CRITICAL_SECURITY":
            critical_security.append(item)
        elif eval_status == "CRITICAL_EXECUTION":
            critical_execution.append(item)
        elif eval_status == "NEEDS_IMPROVEMENT":
            needs_improvement.append(item)
        elif eval_status == "ACCEPTABLE":
            acceptable.append(item)
        else:  # GOOD
            good.append(item)

    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
    if critical_security:
        print("\nüî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ó–ê–ü–†–û–°–´ (–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨):")
        for i, item in enumerate(critical_security, 1):
            print(f"{i}. {item['file_path']} ({item['type']})")
            print(f"   –ü—Ä–∏—á–∏–Ω–∞: {item['analysis']['issues'][0]}")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {', '.join(item['analysis']['recommendations'])}")

    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã (–æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
    if critical_execution:
        print("\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ó–ê–ü–†–û–°–´ (–û–®–ò–ë–ö–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø):")
        for i, item in enumerate(critical_execution, 1):
            print(f"{i}. {item['file_path']} ({item['type']})")
            print(f"   –ü—Ä–∏—á–∏–Ω–∞: {item['analysis']['issues'][0]}")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {', '.join(item['analysis']['recommendations'])}")

    # –í—ã–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
    if needs_improvement:
        print("\nüîß –ó–ê–ü–†–û–°–´, –¢–†–ï–ë–£–Æ–©–ò–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
        for i, item in enumerate(needs_improvement, 1):
            print(f"{i}. {item['file_path']} ({item['type']})")
            print(f"   –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(item['analysis']['issues'])}")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {', '.join(item['analysis']['recommendations'])}")

    # –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–µ–º–ª–µ–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if acceptable:
        print("\nüÜó –ü–†–ò–ï–ú–õ–ï–ú–´–ï –ó–ê–ü–†–û–°–´:")
        for i, item in enumerate(acceptable, 1):
            print(f"{i}. {item['file_path']} ({item['type']})")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {', '.join(item['analysis']['recommendations'])}")

    # –í—ã–≤–æ–¥–∏–º —Ö–æ—Ä–æ—à–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    if good:
        print("\n‚úÖ –•–û–†–û–®–ò–ï –ó–ê–ü–†–û–°–´:")
        for i, item in enumerate(good, 1):
            print(f"{i}. {item['file_path']} ({item['type']})")
            print(f"   –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {', '.join(item['analysis']['recommendations'])}")

    print("\n" + "=" * 70)


def check_jenkins_criteria(report):
    critical_security_count = 0
    critical_execution_count = 0
    needs_improvement_count = 0
    total = len(report)

    if total == 0:
        print("‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
        return False

    for item in report:
        try:
            eval_status = item["analysis"]["evaluation"]
            if eval_status == "CRITICAL_SECURITY":
                critical_security_count += 1
            elif eval_status == "CRITICAL_EXECUTION":
                critical_execution_count += 1
            elif eval_status == "NEEDS_IMPROVEMENT":
                needs_improvement_count += 1
        except:
            continue

    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"- –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total}")
    print(f"- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å): {critical_security_count}")
    print(f"- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ (–æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è): {critical_execution_count}")
    print(f"- –¢—Ä–µ–±—É—é—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {needs_improvement_count}")
    print(f"- –î–æ–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è: {needs_improvement_count / total:.0%} ({needs_improvement_count}/{total})")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    blocked = False
    if critical_security_count > 0:
        print("\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ó–ê–ü–†–û–°–´ (–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨)!")
        print("–ó–∞–ø—Ä–µ—â–∞—é –¥–µ–ø–ª–æ–π –∏–∑-–∑–∞ –æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (DROP, DELETE –±–µ–∑ WHERE –∏ —Ç.–¥.)")
        blocked = True

    if critical_execution_count > 0:
        print("\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ó–ê–ü–†–û–°–´ (–û–®–ò–ë–ö–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø)!")
        print("–ó–∞–ø—Ä–µ—â–∞—é –¥–µ–ø–ª–æ–π –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –∏ —Ç.–¥.)")
        blocked = True

    if needs_improvement_count / total > 0.6:
        print("\n‚ùå –°–õ–ò–®–ö–û–ú –ú–ù–û–ì–û –ó–ê–ü–†–û–°–û–í –¢–†–ï–ë–£–Æ–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò (>60%)!")
        print(f"–ó–∞–ø—Ä–µ—â–∞—é –¥–µ–ø–ª–æ–π ({needs_improvement_count}/{total} –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç—Ä–µ–±—É—é—Ç —É–ª—É—á—à–µ–Ω–∏—è)")
        blocked = True

    if not blocked:
        print("\n‚úÖ –í–°–ï –ó–ê–ü–†–û–°–´ –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–¢ –°–¢–ê–ù–î–ê–†–¢–ê–ú. –†–ê–ó–†–ï–®–ê–Æ –î–ï–ü–õ–û–ô.")

    return not blocked


def main():
    try:
        parser = argparse.ArgumentParser(description='LLM Query Analyzer')
        parser.add_argument('--results', default='explain_results.json', help='Input EXPLAIN results')
        parser.add_argument('--report', default='llm_report.json', help='Output report file')
        args = parser.parse_args()

        with open(args.results, 'r', encoding='utf-8') as f:
            results = json.load(f)

        report = generate_report(results)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open(args.report, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)

        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print_detailed_report(report)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è Jenkins
        if not check_jenkins_criteria(report):
            sys.exit(1)

        sys.exit(0)

    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == '__main__':
    main()