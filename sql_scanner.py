import re
import os
from pathlib import Path
from datetime import datetime

def normalize_sql_query(raw_query):
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å, –∑–∞–º–µ–Ω—è—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    original = raw_query
    
    # –ë–∞–∑–æ–≤—ã–µ –∑–∞–º–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    replacements = [
        (r'\$\d+', '1'),              # $1, $2, $3 ‚Üí 1
        (r'\\?', '1'),                # ? ‚Üí 1
        (r':\w+', '1'),               # :param ‚Üí 1
        (r'@\w+', '1'),               # @variable ‚Üí 1
        (r'%s', "'test'"),            # %s ‚Üí 'test'
        (r'%d', '1'),                 # %d ‚Üí 1
    ]
    
    normalized = raw_query
    for pattern, replacement in replacements:
        normalized = re.sub(pattern, replacement, normalized, flags=re.IGNORECASE)
    
    # –£–º–Ω—ã–µ –∑–∞–º–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if 'WHERE' in normalized.upper():
        normalized = re.sub(r'WHERE\s+.+?=\s*[^\\s]+', 'WHERE 1=1', normalized, flags=re.IGNORECASE)
    
    if 'VALUES' in normalized.upper():
        normalized = re.sub(r'VALUES\s*\([^)]+\)', 'VALUES (1)', normalized, flags=re.IGNORECASE)
    
    if 'LIMIT' in normalized.upper():
        normalized = re.sub(r'LIMIT\s+\$\d+', 'LIMIT 10', normalized, flags=re.IGNORECASE)
        normalized = re.sub(r'LIMIT\s+\\?', 'LIMIT 10', normalized, flags=re.IGNORECASE)
    
    if 'OFFSET' in normalized.upper():
        normalized = re.sub(r'OFFSET\s+\$\d+', 'OFFSET 0', normalized, flags=re.IGNORECASE)
        normalized = re.sub(r'OFFSET\s+\\?', 'OFFSET 0', normalized, flags=re.IGNORECASE)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π (–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–Ω—É –≤ –∫–æ–Ω—Ü–µ)
    normalized = re.sub(r';+', ';', normalized)
    if not normalized.endswith(';'):
        normalized += ';'
    
    return normalized

def is_valid_sql_query(query):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–≥–ª—è–¥–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≤–∞–ª–∏–¥–Ω—ã–π SQL
    """
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if len(query) < 10:
        return False
    
    # –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ SQL-—Å–ª–æ–≤–∞
    sql_keywords = ['SELECT', 'INSERT', 'UPDATE', 'DELETE', 'CREATE', 'ALTER', 'DROP', 'FROM', 'WHERE', 'INTO', 'VALUES', 'SET']
    if not any(keyword in query.upper() for keyword in sql_keywords):
        return False
    
    # –ù–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∏–ª–∏ –æ–±—Ä—ã–≤–∫–æ–º
    invalid_patterns = [
        r'^--',      # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        r'^\/\*',    # –ë–ª–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        r'^\.',      # –¢–æ—á–∫–∏ (–æ–±—Ä—ã–≤–∫–∏)
        r'^\,',      # –ó–∞–ø—è—Ç—ã–µ
        r'^\)',      # –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
    ]
    
    for pattern in invalid_patterns:
        if re.match(pattern, query.strip()):
            return False
    
    return True

def find_sql_queries():
    print("üîç Starting advanced SQL query scanner...")
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ SQL
    sql_patterns = {
        'SELECT': re.compile(r'SELECT\s+.+?FROM\s+.+?(?:WHERE\s+.+?)?(?:LIMIT\s+.+?)?(?:OFFSET\s+.+?)?;?', re.IGNORECASE | re.DOTALL),
        'INSERT': re.compile(r'INSERT\s+INTO\s+.+?VALUES\s*\(.+?\);?', re.IGNORECASE | re.DOTALL),
        'UPDATE': re.compile(r'UPDATE\s+.+?SET\s+.+?(?:WHERE\s+.+?)?;?', re.IGNORECASE | re.DOTALL),
        'DELETE': re.compile(r'DELETE\s+FROM\s+.+?(?:WHERE\s+.+?)?;?', re.IGNORECASE | re.DOTALL),
        'CREATE': re.compile(r'CREATE\s+(?:TABLE|INDEX|VIEW)\s+.+?;?', re.IGNORECASE | re.DOTALL),
        'ALTER': re.compile(r'ALTER\s+TABLE\s+.+?;?', re.IGNORECASE | re.DOTALL)
    }
    
    found_queries = []
    
    # –ò—â–µ–º –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞
    for root, dirs, files in os.walk('.'):
        for file in files:
            # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –∫–æ–¥–∞
            if file.endswith(('.go', '.java', '.py', '.js', '.ts', '.php', '.rb')):
                filepath = os.path.join(root, file)
                try:
                    with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                        content = f.read()
                        
                        for query_type, pattern in sql_patterns.items():
                            matches = pattern.findall(content)
                            for match in matches:
                                clean_query = match.strip()
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
                                if is_valid_sql_query(clean_query):
                                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–ø—Ä–æ—Å (–∑–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
                                    normalized_query = normalize_sql_query(clean_query)
                                    
                                    found_queries.append({
                                        'file': filepath,
                                        'type': query_type,
                                        'original': clean_query,
                                        'normalized': normalized_query
                                    })
                                    
                except Exception as e:
                    print(f"Error reading {filepath}: {e}")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    with open('found_queries.sql', 'w', encoding='utf-8') as f:
        f.write(f"-- Found {len(found_queries)} valid SQL queries on {datetime.now()}\n\n")
        
        for i, query in enumerate(found_queries, 1):
            f.write(f"-- Query #{i}: {query['file']} ({query['type']})\n")
            f.write(f"-- Original: {query['original']}\n")
            f.write(f"{query['normalized']}\n\n")
    
    print(f"Found {len(found_queries)} valid SQL queries in code")
    print("Results saved to found_queries.sql")

if __name__ == "__main__":
    find_sql_queries()